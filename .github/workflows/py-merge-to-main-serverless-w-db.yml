# Normally called when a merge to the main branch happens.
on:
  workflow_call:
    inputs:
      auto-release-environment:
        required: false
        type: string
        default: dev
        description: Defaults to dev; this is the environment to auto-release into when release is created..
      override-stage-name:
        required: false
        type: string
        default: ${{ inputs.auto-release-environment }}
        description: Defaults to the environment name; use this if the stage is different; like if its an account-wide "all" stage.
      release-branch:
        required: false
        type: string
        default: ''
        description: Branch to open pull release PR against (defaults to repo default branch if not specified).
      package-name:
        required: false
        type: string
        description: here for backwards compatibility; this is ignored and now it's auto-discovered.
name: merge-to-main-release-please
jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      created-release: ${{ steps.release.outputs.created-release }}
    env:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: pg-pass
      POSTGRES_DB: unitTestingDB-unit
      POSTGRES_PORT: 5432
      POSTGRES_HOST: localhost
    steps:
      - uses: zerapix/reusable-workflows/py-create-release@main
        id: release
        with:
          GEMFURY_DEPLOY_TOKEN: ${{ secrets.GEMFURY_DEPLOY_TOKEN }}
          release-branch: ${{ inputs.release-branch }}
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: pg-pass
          POSTGRES_DB: pixyDocsApi-unknown
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
        - 5432:5432

  # Create Separate Job, to distinguish release-creation from deployment
  # (release could have succeeded but deployment fail, can easily re-run deployment without running create-release again)
  deploy-release:
    needs: create-release
    runs-on: ubuntu-latest
    environment: ${{ inputs.auto-release-environment }}
    concurrency: deploy-dev
    if: ${{ needs.create-release.outputs.created-release }}
    steps:
      - uses: zerapix/reusable-workflows/py-setup-project@main
        with:
          GEMFURY_DEPLOY_TOKEN: ${{ secrets.GEMFURY_DEPLOY_TOKEN }}
      - uses: zerapix/reusable-workflows/py-deploy-serverless@main
        with:
          environment: ${{ inputs.auto-release-environment }}
          override-stage-name: ${{ inputs.override-stage-name}}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

