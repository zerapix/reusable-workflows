# Normally called when a merge to the main branch happens.
on:
  workflow_call:
    inputs:
      auto-release-environment:
        required: false
        type: string
        default: dev
        description: Defaults to dev; this is the environment to auto-release into when release is created..
      release-branch:
        required: false
        type: string
        default: ''
        description: Branch to open pull release PR against (defaults to repo default branch if not specified).
      package-name:
        required: false
        type: string
        description: here for backwards compatibility; this is ignored and now it's auto-discovered.
name: merge-to-main-release-please
jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      created-release: ${{ steps.release.outputs.release_created }}
    env:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: pg-pass
      POSTGRES_DB: unitTestingDB-unit
      POSTGRES_PORT: 5432
      POSTGRES_HOST: localhost
    steps:
      - uses: zerapix/reusable-workflows/py-run-tests@main
        with:
          GEMFURY_DEPLOY_TOKEN: ${{ secrets.GEMFURY_DEPLOY_TOKEN }}

      # TODO: Next two steps are the same as in `py-create-release.yml`,
      # TODO: should put it in action to reuse code/steps.
      # TODO: Currently working in this ^ todo...
      - name: Install tomlkit
        # Ensure tomlkit is installed, so I can retrieve package info on next step.
        # In Python 3.11, there is now a built-in `tomllib` library we can use.
        # Once everything is on Python 3.11, we can change this code to use `tomllib` instead.
        run: poetry run pip install tomlkit
      - name: Retrieve Project Package via tomlkit
        run: |
          PY_OUTPUT=$(poetry run -q python -c "import tomlkit; import pathlib; print(tomlkit.parse(pathlib.Path('pyproject.toml').read_text())['tool']['poetry']['name'], end='')")
          echo "PY_PKG=$PY_OUTPUT" >> $GITHUB_ENV

      # release-please, increments version and tags releases.
      - uses: google-github-actions/release-please-action@v3
        id: release
        with:
          release-type: python
          package-name: ${{ env.PY_PKG }}
          default-branch: ${{ inputs.release-branch }}
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: pg-pass
          POSTGRES_DB: pixyDocsApi-unknown
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
        - 5432:5432

  # Create Separate Job, to distinguish release-creation from deployment
  # (release could have succeeded but deployment fail, can easily re-run deployment without running create-release again)
  deploy-release:
    needs: create-release
    runs-on: ubuntu-latest
    environment: ${{ inputs.auto-release-environment }}
    concurrency: deploy-dev
    if: ${{ needs.create-release.outputs.created-release }}
    steps:
      - uses: zerapix/reusable-workflows/py-setup-project@main
        with:
          GEMFURY_DEPLOY_TOKEN: ${{ secrets.GEMFURY_DEPLOY_TOKEN }}
      - uses: zerapix/reusable-workflows/py-deploy-serverless@main
        with:
          environment: ${{ inputs.auto-release-environment }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

