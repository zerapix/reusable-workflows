# Normally called when a merge to the main branch happens.
on:
  workflow_call:
    inputs:
     package-name:
        required: true
        type: string
        description: Python package we are versioning/deploying.
name: merge-to-main-release-please
jobs:
  release-please:
    runs-on: ubuntu-latest
    env:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: pg-pass
      POSTGRES_DB: unitTestingDB-unit
      POSTGRES_PORT: 5432
      POSTGRES_HOST: localhost
    steps:
      - uses: zerapix/reusable-workflows/py-run-tests@feature/sc-5232-pixydocsapi-workflow-for-deployment
      #----------------------------------------------
      # release-please, increments version and tags releases.
      #----------------------------------------------
      - uses: google-github-actions/release-please-action@v3
        id: release
        with:
          release-type: python
          package-name: singleton-type
      #----------------------------------------------
      # deploy via serverless
      #----------------------------------------------
      - name: Setup Node.js
        id: setup_node
        if: ${{ steps.release.outputs.release_created }}
        uses: actions/setup-node@v3
        with:
          node-version: "18"
          cache: "yarn"
      - name: Install Yarn/Serverless Deps Into ${{ steps.setup_node.outputs.node-version }}
        run: yarn install --frozen-lockfile
        if: ${{ steps.release.outputs.release_created }}
      - name: Serverless Deploy to dev
        if: ${{ steps.release.outputs.release_created }}
        uses: serverless/github-action@v3.1
        with:
          # Hard-coding the environment for now, when we start dealing with other environments
          # look into environment feature of github actions/workflows.
          args: deploy -s dev
        env:
          # todo: checkout what we can do with `SERVERLESS_ACCESS_KEY`:
          # SERVERLESS_ACCESS_KEY: ${{ secrets.SERVERLESS_ACCESS_KEY }}

          # todo: For now use AWS credentials directly
          AWS_ACCESS_KEY_ID: ${{ secrets.DEV_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.DEV_AWS_SECRET_ACCESS_KEY }}
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: pg-pass
          POSTGRES_DB: pixyDocsApi-unknown
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
        - 5432:5432
