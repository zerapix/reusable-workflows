# Normally called when a merge to the main branch happens.
on:
  workflow_call:
    inputs:
      auto-release-environment:
        required: false
        type: string
        default: dev
        description: Defaults to dev; this is the environment to auto-release into when release is created..

      override-stage-name:
        required: false
        type: string
        default: ''
        description: Defaults to the auto-release-environment name; use this if the stage is different; like if its an account-wide "all" stage.

      release-branch:
        required: false
        type: string
        default: ''
        description: Branch to open pull release PR against (defaults to repo default branch if not specified).

name: merge-to-main-release-please
jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      created-release: ${{ steps.release.outputs.created-release }}
    steps:
      - uses: zerapix/reusable-workflows/py-create-release@main
        id: release
        with:
          GEMFURY_DEPLOY_TOKEN: ${{ secrets.GEMFURY_DEPLOY_TOKEN }}
          release-branch: ${{ inputs.release-branch }}

  # Create Separate Job, to distinguish release-creation from publishing
  # (release could have succeeded but deployment fail, can easily re-run deployment without running create-release again)
  publish-release:
    needs: create-release
    runs-on: ubuntu-latest
    concurrency: publish-dev
    if: ${{ needs.create-release.outputs.created-release }}
    steps:
      - uses: zerapix/reusable-workflows/py-setup-project@main
        with:
          GEMFURY_DEPLOY_TOKEN: ${{ secrets.GEMFURY_DEPLOY_TOKEN }}
      - uses: zerapix/reusable-workflows/py-publish-fury@main
        with:
          GEMFURY_PUBLISH_TOKEN: ${{ secrets.GEMFURY_PUBLISH_TOKEN }}

  # Create Separate Job, to distinguish release-creation from deployment
  # (release could have succeeded but deployment fail, can easily re-run deployment without running create-release again)
  deploy-release:
    needs: create-release
    runs-on: ubuntu-latest
    environment: ${{ inputs.auto-release-environment }}
    concurrency: deploy-dev
    if: ${{ needs.create-release.outputs.created-release }}
    steps:
      - uses: zerapix/reusable-workflows/py-setup-project@main
        with:
          GEMFURY_DEPLOY_TOKEN: ${{ secrets.GEMFURY_DEPLOY_TOKEN }}
      - uses: zerapix/reusable-workflows/py-deploy-serverless@main
        with:
          environment: ${{ inputs.auto-release-environment }}
          override-stage-name: ${{ inputs.override-stage-name }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
