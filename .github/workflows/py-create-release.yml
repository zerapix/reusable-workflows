# Creates a release; if you want to use this in other projects a better start is probably
# one of the py-merge-to-main-* workflows (which in turn can use this reusable workflow).
on:
  workflow_call:
    inputs:
      RUN_TESTS:
        required: false
        type: string
        description: Python package we are versioning/deploying; only skips if string is set to 'false' (using string, as composite actions only use strings)
        default: 'true'
    outputs:
      created-release:
        description: "If final/tagged release was created or not."
        value: ${{ jobs.create-release.outputs.created-release }}
name: Create (Pre-)Release
jobs:
  create-pre-or-release:
    runs-on: ubuntu-latest
    outputs:
      created-release: ${{ steps.release.outputs.release_created }}
    steps:
      - uses: zerapix/reusable-workflows/py-run-tests@main
        with:
          GEMFURY_DEPLOY_TOKEN: ${{ secrets.GEMFURY_DEPLOY_TOKEN }}
          RUN_TESTS: ${{ inputs.RUN_TESTS }}
      - name: Install tomlkit
        # Ensure tomlkit is installed so I can retrieve package info on next step.
        # In Python 3.11, there is now a built-in `tomllib` library we can use.
        # Once everything is on Python 3.11, we can change this code to use `tomllib` instead.
        run: poetry run pip install tomlkit
      - name: Retrieve Project Package via tomlkit
        run: |
          PY_OUTPUT=$(poetry run python -c "import tomlkit; import pathlib; print(tomlkit.parse(pathlib.Path('pyproject.toml').read_text())['tool']['poetry']['name'], end='')")
          echo "PY_PKG=$PY_OUTPUT" >> $GITHUB_ENV
      - uses: google-github-actions/release-please-action@v3
        id: release
        with:
          release-type: python
          package-name: ${{ env.PY_PKG }}
