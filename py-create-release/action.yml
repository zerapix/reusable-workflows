name: Create Release
description: Reusable action to create Python releases.
outputs:
  created-release-tag-name:
    description: Tag name of the created release
    value: ${{ steps.release.outputs.created-release-tag-name }}
runs:
  using: composite
  steps:
    - name: Install tomlkit
      # Ensure tomlkit is installed, so I can retrieve package info on next step.
      # In Python 3.11, there is now a built-in `tomllib` library we can use.
      # Once everything is on Python 3.11, we can change this code to use `tomllib` instead.
      shell: bash
      run: poetry run pip install tomlkit
    - name: Retrieve Project Package via tomlkit
      shell: bash
      run: |
        PY_OUTPUT=$(poetry run -q python -c "import tomlkit; import pathlib; print(tomlkit.parse(pathlib.Path('pyproject.toml').read_text())['tool']['poetry']['name'], end='')")
        echo "PY_Z_MODULE=$PY_OUTPUT" | tr - _ >> $GITHUB_ENV

    - name: Copy + Configure .versionrc.json File...
      shell: bash
      run: |
        cp .reusable-workflows/versionsrc-config/python.versionrc.json .versionrc.json
        echo "`jq '.bumpFiles[2].filename="'$PY_Z_MODULE'/__init__.py"' .versionrc.json`" > .versionrc.json
      env:
        PY_Z_MODULE: ${{ env.PY_Z_MODULE }}
    - uses: ./.reusable-workflows/all-commit-and-tag-release
      id: release

